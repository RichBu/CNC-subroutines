%NC21 4 AXES ENGRAVIN,MX---,
;BASIC PLC- FAGOR AUTOMATION IS NOT RESPONSIBLE FOR THE PLC PROGRAM 
;THIS IS A MINIMAL PLC PROGRAM REQUIRED TO ALLOW THE CNC TO FUNCTION
;THE OEM TAKES FULL RESPONSIBILITY FOR ANY ERRATIC BEHAVIOR ON YOUR MACHINE. 
;SEPERATED E-STOP AND SERVO ENABLE OUTPUTS SO SPINDLE WILL
;WORK WHEN IN 2 AXIS MODE
;CORRECTED SOFTLIMIT TO WORK WHEN IN 2 AXIS MODE
;SIMPLE CYCLES ADDED (FA. 05/03/08)
;
;              Definition of symbols (mnemonics)
;              *********************************
;
;
DEF /EMERINP  I1   ; definition of "/EMERINP" to represent input #1    
DEF ISPALARM  I3   ; SPINDLE DRIVE FAULT = 1
DEF IREFX     I4   ; X Reference Switch NC
DEF IREFY     I5   ; Y Reference Switch NC
DEF IREFZ     I6   ; Z Reference Switch NC
DEF IREFA     I7   ; A Reference Switch NC
DEF IXOT      I8   ; X OVERTRAVEL NC
DEF IYOT      I9   ; Y OVERTRAVEL NC
DEF IZOT      I10  ; Z OVERTRAVEL NC
DEF ISPINON   I12  ; SPIN ARE ON
DEF IONECAV   I97  ; STOP AFTER ONE CAVITY
DEF IONEROW   I98  ; STOP AFTER ONE ROW
DEF CONTA      M143 ; CONTIN A ROTATION
DEF STATONECAV M145 ; ONE CAV STATUS
DEF STATONEROW M146 ; ONE ROW STATUS
DEF SRUNORSIM  M147 ; RUNNING OR SIM
DEF SSTOPCR    M149 ; STOPPED FOR INSP FROM CNC
DEF SSPINON    M150 ; SPIN ON STATUS
DEF KNB_FDVL   R90  ; FEED OVER RIDE LAST VALUE
DEF KNB_FDVC   R91  ; FEED OVER RIDE CURRENT VALUE
DEF KNB_FDAD   R92  ; FEED ADJUST
DEF KNB_FDTM   R93  ; FEED TEMPORARY VALUE   
DEF ZOFFSTIM   R103 ; NUMBER OF TIMES NOT AT PROPER SCREEN
DEF ZOFFKTIM   R104 ; COUNT KEYS NOT SENT
DEF ZOFFTMP    R94  ; Z OFFSET TEMP VALUE
DEF ZOFFTMP2   R95  ; 2ND ZOFF TEMP VALUE
DEF ZOFFTMP3   R96  ; 3RD ZOFF TEMP VALUE
DEF ZOFFTMP4   R97  ; 4TH ZOFF TEMP VALUE
DEF ZADJ_CYC   M151 ; Z HEIGHT ADJUSTMENT CYCLE IS ON
DEF ZADJ_STP   M160 ; M160 TO M186 ARE Z ADJUST STEPS
DEF ZUP_CYC    M152 ; Z GOING UP CYCLE IS ON
DEF ZUP_POS    M154 ; Z IS IN THE UP POSITION
DEF ZDN_CYC    M153 ; Z GOING DOWN CYCLE IS ON
DEF LT_ONECR   O33  ; LT FOR ONE ROW OR CAV
DEF LP_TLCMP   M129 ; TOOL COMP LOOP
;
; FOR SEND KEYS
;
DEF SNDKEYST   M214 ; START KEY SEND CYCLE
DEF SK_ST0     M215 ; SEND KY _STATE 0
DEF SK_ST1     M187 ; _STATE 1
DEF SK_ST2     M188 ; _STATE 2
DEF SK_ST3     M200 ; _STATE 3
DEF KEYCODE    R98  ; KEY CODE TO SEND
DEF KEYACPT    R99  ; KEY CODE ACCEPTED BY CNC
DEF KEYACK     M201 ; KEY SEND WAS ACK
DEF KEYATIM    R102 ; NUMBER OF TIMES KEY ACK IS LOOPED
DEF KEY_SRC    R101 ; KEY SOURCE 0=KEY 1=PLC
DEF KSRC_C     0    ; CNC IS THE KEY SOURCE
DEF KSRC_P     1    ; PLC IS THE KEY SOURC
DEF K_MAINM    $FFF4
DEF K_START    $FFF1
DEF K_F3       $FC02
DEF K_F4       $FC03
DEF K_F5       $FC04
DEF K_F6       $FC05
DEF K_EXE      $F003
;
DEF S1C_CYC    M202 ; SEND 1 CHAR CYC
DEF SND1CH     M205 ; SEND 1 CHAR
DEF S1C_ST0    M206 ; _ST0
DEF S1C_ST1    M207 ; _ST1
DEF S1C_ST2    M208 ; _ST2
DEF S1C_ST3    M209 ; _ST3
DEF S1C_ST4    M210 ; _ST4
DEF S1C_ST5    M211 ; _ST5
DEF S1C_ST6    M212 ; _ST6
DEF S1CHACK    M213 ; ACK
;
; STRINGS TO SEND
;
DEF SNDSTR1    M189 ; SEND STRING #1 = MAIN MENU + EXEC + F3 + F6
DEF SS1_CYC    M190 ; SEND STR 1 CYCLE IS ON
DEF SS1_ST0    M191 ; SEND STR #1 STATE 0
DEF SS1_ST1    M192 ; _STATE 1
DEF SS1_ST2    M193 ; _STATE 2
DEF SS1_ST3    M194 ; _STATE 3
DEF SS1_ST4    M195 ; _STATE 4
DEF SS1_ST5    M196 ; _STATE 5
DEF SS1_ST6    M197 ; _STATE 6
DEF SS1_ST7    M198 ; _STATE 7
DEF SS1_ST8    M199 ; _STATE 8
;
DEF SNDSTR2    M216 ; SEND STRING #2 = MAIN MENU + EXEC + F3 + F6
DEF SS2_CYC    M217 ; SEND STR 2 CYCLE IS ON
DEF SS2_ST0    M218 ; SEND STR #2 STATE 0
DEF SS2_ST1    M219 ; _STATE 1
DEF SS2_ST2    M220 ; _STATE 2
DEF SS2_ST3    M221 ; _STATE 3
DEF SS2_ST4    M222 ; _STATE 4
DEF SS2_ST5    M223 ; _STATE 5
DEF SS2_ST6    M224 ; _STATE 6
DEF SS2_ST7    M225 ; _STATE 7
DEF SS2_ST8    M226 ; _STATE 8
;
DEF /EMEROUT O1         ; definition of "/EMER OUT" to represent output #1
;
;
; O1            Main Relay
; O2            XYZW Enable
; O3            M3 Spindle
; O4            M4 Spindle
; O5            Coolant M8 ON , M9 OFF
;
;
;              Initial cycle (power-up routines)
;              *********************************
;
CY1 
() = ERA O1 512         ; outputs 
   = ERA M1 2000        ; user marks
   = ERA M4000 4127     ; marks associated with messages
   = ERA M4500 4563     ; marks associated with errors
   = ERA M4700 4955     ; marks associated with screens
   = ERA C1 256         ; counters
   = ERA T1 256         ; timers
   = ERA R1 255         ; REGISTERS
   = SET DRO3
   = RES SERVOZON
   = RES MSG2
   = SET PLCREADY   
   = B7R508         ;IGNORES SPINDLE ORIENTATION
   = SET TOOLINSP   ;To access the tool inspection mode, first interrupt 
                    ;the execution and then press the T key
   = MOV 1 R1
   = MOV 0 R2
   = CNCRD(MPX5,R80,M1111)
   = CNCRD(MPX6,R81,M1111)
   = CNCRD(MPY5,R82,M1111)
   = CNCRD(MPY6,R83,M1111)
   = CNCRD(MPZ5,R84,M1111)
   = CNCRD(MPZ6,R85,M1111)
   = CNCRD(MPA5,R86,M1111)
   = CNCRD(MPA6,R87,M1111)
   = CNCWR(R80,LIMPLX,M1111)
   = CNCWR(R81,LIMMIX,M1111)
   = CNCWR(R82,LIMPLY,M1111)
   = CNCWR(R83,LIMMIY,M1111)
   = CNCWR(R84,LIMPLZ,M1111)
   = CNCWR(R85,LIMMIZ,M1111)
   = CNCWR(R86,LIMPLA,M1111)
   = CNCWR(R87,LIMMIA,M1111)
   = CNCRD(MPZ21,R21,M1111)
   = CNCRD(MPZ22,R22,M1111)
   = SET ACTLIM2
   = RES MSG30
   = RES CONTA
   = RES LP_TLCMP
   = RES M110
   = RES M111
                    ;for the feed over ride knob
   = CNCRD(CNCFRO,KNB_FDVL,M1111)    ; FEED LAST VVALUE
   = MOV 0 KNB_FDAD                  ; FEED ADJUST 
   = MOV 0 KNB_FDTM                  ; TEMP VALUE
   = CNCWR(KNB_FDTM,PLCFRO,M1111)    ; PLC FEED OVER RIDE
   = CNCWR(KNB_FDTM,PLCCFR,M1111)    ; PLC FEED OVER RIDE
   = RES M5008
;   = CNCEX(P155=0)
;   = CNCEX1((CALL 8890),M1111)
END 
;
;               Main PLC Program
;
PRG 
REA
;
() = GEAR1 ;LOW  GEAR ACTIVATED
M2046
   = GEAR2 ;NO GEAR3
   = GEAR3 ;NO GEAR3
   = GEAR4 ;NO GEAR4
;
;
()=CNCRD(OPMODE,R144,M1111)
CPS R144 GE 20 AND CPS R144 LE 25=M144; SIMULATION IS ACTIVE
;
;
M203 OR (M144 AND (NOT M149))= SRUNORSIM
IONECAV = STATONECAV
IONEROW = STATONEROW
STATONECAV AND SRUNORSIM = MSG20
STATONECAV AND (NOT SRUNORSIM) = MSG21
STATONEROW AND SRUNORSIM = MSG22
STATONEROW AND (NOT SRUNORSIM) = MSG23
;
START = TG1 20 100 
CPS T20 LT 50 = M148
CPS T20 GE 100 = TG1 20 100
(STATONECAV OR STATONEROW) AND (SRUNORSIM OR M148) = LT_ONECR
; 
; CNC FEED OVER RIDE KNOB
;
()=CNCRD(CNCFRO,KNB_FDVC,M1111)
; CPS KNB_FDVC NE KNB_FDVL = CNCEX1((CALL 8890),M1111)
CPS KNB_FDVC NE KNB_FDVL = MOV 0 KNB_FDAD
 = CNCRD(CNCFRO,KNB_FDVL,M1111)
 = MOV 0 KNB_FDTM
 = CNCWR(KNB_FDTM,PLCFRO,M1111) 
 = CNCWR(KNB_FDTM,PLCCFR,M1111) 
;
ISPINON = SSPINON
M203 AND (NOT SSPINON) = MSG5
;
;
()=CNCRD(TPOSX,R155,M1111)
()=CNCRD(TPOSY,R156,M1111)
()=CNCRD(TPOSZ,R157,M1111)
()=CNCRD(TPOSA,R158,M1111)
;--------------------
;-- SPINDLE ON/OFF --
;--------------------
;
;
; 
/EMERINP = /EMERGEN
NOT /EMERINP 
  = RES ZADJ_CYC
  = RES ZUP_CYC
  = RES ZUP_POS
  = RES ZDN_CYC
  = RES SNDKEYST
  = ERA M160 M180
  = RES M5008
I1 AND /ALARM AND CNCREADY AND NOT LOPEN AND PLCREADY = /EMEROUT
;
/EMEROUT = TG2 2 1000
T2 = M10
;
;               cycle start logic
;               =================
;
START
  = CYSTART
;  = RES ZADJ_CYC
;  = RES M5008
;
;               servo enable logic 
;               ==================
;
  M10
= O2 
= SERVOXON
= SERVOYON
= SERVOZON
= SERVOAON
;
;*************************** STOP SIGNAL *************************
;
M10 = /STOP
    = /XFERINH
;
;               M, S, T code logic
;               ==================
;
MSTROBE OR SSTROBE OR TSTROBE= TG1 1 100
   T1 
= NOT AUXEND
; 
;               marks for M codes
;               =================
;
DFU MSTROBE AND CPS MBCD* EQ $00 = M100 
DFU MSTROBE AND CPS MBCD* EQ $01 = M101
DFU MSTROBE AND CPS MBCD* EQ $02 = M102
DFU MSTROBE AND CPS MBCD* EQ $03 = M103 = TG1 4 7000
DFU MSTROBE AND CPS MBCD* EQ $04 = M104
DFU MSTROBE AND CPS MBCD* EQ $05 = M105
DFU MSTROBE AND CPS MBCD* EQ $06 = M106 = SET O8
DFU MSTROBE AND CPS MBCD* EQ $07 = M107
DFU MSTROBE AND CPS MBCD* EQ $08 = M108 
DFU MSTROBE AND CPS MBCD* EQ $09 = M109 
DFU MSTROBE AND CPS MBCD* EQ $30 = M130
DFU MSTROBE AND CPS MBCD* EQ $41 = M141
DFU MSTROBE AND CPS MBCD* EQ $50 = TG1 3 100 ;CAVITY COMPLETE
DFU MSTROBE AND CPS MBCD* EQ $60 = SET O8 ;TOOL CHANGE MESSAGE
DFU CYSTART OR M30 OR M203 = RES O8
T3 = O7
O8 = MSG4 ;CHANGE THE TOOLS, AND PRESS CYCLE START
;
;               Spindle enable
;               ==============
;
;
  DFU M103                   ;M03 COMMAND
= SET M203 = RES M204        ;M03 LATCH
;
  DFU M104                   ;M04 COMMAND
= SET M204 = RES M203        ;M04 LATCH
;
  DFU M105
= RES M203 = RES M204         ;RESET M03/M04
;
   RESETOUT                   ;M30 OR RESET
OR M130                       ;M05 COMMAND
OR M102                       ;SPINDLE IS NOT READY TO ROTATE
OR NOT /ALARM
OR NOT I1
OR NOT O1
= M30
= RES M203 = RES M204         ;RESET M03/M04
= RES ZUP_CYC
= RES ZUP_POS
= RES ZDN_CYC
= RES SNDKEYST
= ERA M160 M180
;M203=O3
; NEW ZADJ OFFSET
M203 AND ((ZADJ_CYC AND (NOT SBOUT OR INCYCLE )) OR (NOT ZADJ_CYC AND (NOT ZUP_POS OR ZDN_CYC)) OR (ZADJ_CYC AND NOT ZUP_CYC AND NOT ZDN_CYC)) = O3
M10 AND (NOT T4) AND ((NOT M203) OR SSPINON OR ZUP_POS) = /FEEDHOL
;
;
; SPINDLE FAULT
ISPALARM = ERR5
;
;               HOME
;               ====
;
IREFX = DECELX                    ; X axis HOME 
IREFY = DECELY                    ; Y axis HOME 
IREFZ = DECELZ                    ; Z axis HOME 
IREFA = DECELA                    ; Z axis HOME 
;
;
;
(CUSTOM OR MANUAL) AND B7R563 OR I16 = M850 ; IGNORES HARDWARE LIMITS
M850 AND NOT I16 = MSG11
;
;               COOLANT
;               =======
;
M108 OR B15R563 = SET O5 = SET MSG50 
M109 OR B18R562 OR RESETOUT OR M130 OR M105 = RES O5 = RES MSG50
;
B11R562 = AXIS-A
;B27R562 = AXIS+A
B27R562 OR CONTA = AXIS+A
; DFU B9R563 = CNCEX1((CALL 8880),M1111)
; DFU B9R563 = CPL CONTA
DFU B6R563 AND CPS R144 EQ 10 
= SET ZUP_CYC
= SET ZADJ_CYC
DFU B6R563 AND CPS R144 EQ 40 = CNCEX1((CALL 8882),M1111) ; MOVE UP +4
DFU B5R563 AND CPS R144 EQ 10
= SET ZDN_CYC  ; SHOULD TURN ON SPINDLES FIRST BEFORE MOVING DOWN
= SET ZADJ_CYC
DFU B5R563 AND CPS R144 EQ 40 = CNCEX1((CALL 8881),M1111) ; MOVE DOWN 4
DFU B4R563 = CNCEX1((CALL 8887),M1111)
DFU B3R563 = CNCEX1((CALL 8886),M1111)
DFU B2R563 = CNCEX1((CALL 8884),M1111)
DFU B1R563 = CNCEX1((CALL 8883),M1111)
DFU B10R563 = CNCEX1((CALL 8885),M1111)
DFU B15R563 = CNCEX1(G56,M1111)
DFU B1R563  = SET ZADJ_CYC   ; Z ADJUST CYCLE HAS STARTED
DFU ZADJ_CYC
= MOV 0 ZOFFSTIM 
= MOV 0 ZOFFKTIM
= SET M160 
= SET M161
= SET M162
= SET M163
= SET M164
= SET M165
= SET M166
= SET M167
= SET M168
= SET M169 
= SET M170
= SET M171
= SET M172
= SET M173
= SET M174
= SET M175
= SET M176
= SET M177
= SET M178
= SET M179
= SET M180
= SET M181
= SET M182
= SET M183
= SET M184
= SET M185
= SET M186
() = CNCRD(GUP 156,ZOFFTMP4,M1111)  ; CONTINUOUS UPDATE
NOT ZADJ_CYC = JMP L1000
ZADJ_CYC AND M160 = SET M5008 = RES M160
ZADJ_CYC AND M161 AND NOT M160 AND SBOUT AND NOT INCYCLE = RES M161
ZADJ_CYC AND M162 AND NOT M161 = MOV 110 ZOFFTMP = RES SS1_CYC = CNCWR(ZOFFTMP,GUP 295,M163) = RES M162
ZADJ_CYC AND M164 AND NOT M163 = RES M5008 = SET SNDSTR1 = RES M164  ; DON'T NEED TO WAIT AS CNC WILL TURN OFF M164 BEFORE THE INPUT
; PAUSE HERE AND WAIT FOR CNC RESET M165 TO SIGNAL THAT AT THE INPUT
ZADJ_CYC AND M166 AND NOT M165 = RES M162 = RES M163 = RES M164 = RES SNDSTR1 = RES SS1_CYC
; PAUSE UNTIL M166 IS RESET BY CNC AFTER INPUT
; WILL RETURN P156 AS AMOUNT TO Z ADJUST
ZADJ_CYC AND M167 AND NOT M166 = RES S1CHACK = MOV K_F5 KEYCODE = SET SND1CH = RES M167
ZADJ_CYC AND M168 AND NOT M167 AND S1CHACK = RES M168
; CNCRD(OPMODE,R144,M168)
ZADJ_CYC AND M169 AND NOT M168 AND CPS R144 EQ 13 = RES M169
;ZADJ_CYC AND M169 AND NOT M168 AND CPS R144 NE 13 = 
; ZADJ_CYC AND M169 AND NOT M168 AND CPS R144 NE 13 = RES M167 = SET M168
ZADJ_CYC AND M170 AND NOT M169 = CNCRD(GUP 156,ZOFFTMP2,M170)
ZADJ_CYC AND M171 AND NOT M170
  = MOV ZOFFTMP2 ZOFFTMP4 
  = CNCRD(ORGZ54,ZOFFTMP,M171)
ZADJ_CYC AND M172 AND NOT M171 = SBS ZOFFTMP ZOFFTMP2 ZOFFTMP3 = CNCWR(ZOFFTMP3,ORGZ54,M173) = RES M172
ZADJ_CYC AND M174 AND NOT M173 = CNCEX1(G54,M174)
ZADJ_CYC AND M175 AND NOT M174 = RES S1CHACK = MOV K_F6 KEYCODE = SET SND1CH = RES M175
ZADJ_CYC AND M176 AND NOT M175 AND S1CHACK = RES M176 ;CNCEX1(G4 K100,M176)
ZADJ_CYC AND M177 AND NOT M176 = RES M177
ZADJ_CYC AND M178 AND NOT M177 = CNCEX1((CALL 8893),M178)
;ZADJ_CYC AND M176 AND NOT M175 = RES M179
; PAUSE UNTIL M179 IS RESET BY CNC
ZADJ_CYC AND M180 AND NOT M179 = MOV 0 ZOFFSTIM = MOV 0 ZOFFKTIM = RES M180
ZADJ_CYC AND M181 AND NOT M180 AND CPS R144 NE 10 = ADS ZOFFSTIM 1 ZOFFSTIM
ZADJ_CYC AND M181 AND NOT M180 AND CPS R144 EQ 10 = RES M181
= RES M182
= RES M183
= RES M184
= RES M185
ZADJ_CYC AND M181 AND NOT M180 AND CPS ZOFFSTIM GT 20 = RES M181
= SET M182
= SET M183
= SET M184
= SET M185
= SET M186
= MOV 0 ZOFFSTIM
; SEND THE REPOSITION STRING
ZADJ_CYC AND M182 AND NOT M181 AND NOT M180 = RES SS2_CYC = SET SNDSTR2 = RES M182
ZADJ_CYC AND M183 AND NOT M182 AND NOT M180 AND NOT SNDSTR2 AND NOT SS2_CYC = RES M183
= RES M179
= SET M180
= SET M181
= SET M182
= SET M183
= SET M184
= SET M185
= SET M186
ZADJ_CYC AND M186 AND NOT M185 = RES ZADJ_CYC
= RES M186
= RES M185
= RES M184
= RES M183
= RES M182
= RES M181
= RES M180
= RES M170
= RES M169
= RES M168
= RES ZUP_CYC ; Z GOING UP CYCLE IS ON
= RES ZDN_CYC ; Z GOING DOWN CYCLE IS ON
L1000 ; NO ZADJ_CYC GOING ON
;
DFU B0R563  = CNCEX1(F10,M1111)
DFU B7R563  = CNCEX1(F100,M1111)
;
; DECREMENT FEED OVER RIDE
;   WAS CNCEX1((CALL 8891),M1111)
DFU B9R563  = SBS KNB_FDAD 1 KNB_FDTM
= MOV KNB_FDTM KNB_FDAD
= ADS KNB_FDVC KNB_FDAD KNB_FDTM  ; TO TO CURR VALUE
= CNCWR(KNB_FDTM,PLCFRO,M1111)    ; PLC FEED OVER RIDE
= CNCWR(KNB_FDTM,PLCCFR,M1111)    ; PLC FEED OVER RIDE
;
; INCREMENT FEED OVER RIDE
;   WAS CNCEX1((CALL 8892),M1111)
B18R562 = ADS KNB_FDAD 1 KNB_FDTM
= MOV KNB_FDTM KNB_FDAD
= ADS KNB_FDVC KNB_FDAD KNB_FDTM  ; ADD TO CURR VALUE
= CNCWR(KNB_FDTM,PLCFRO,M1111)    ; PLC FEED OVER RIDE
= CNCWR(KNB_FDTM,PLCCFR,M1111)    ; PLC FEED OVER RIDE
;
;
;
; SEND KEYS
;
;
SNDKEYST = SET SK_ST0 = SET SK_ST1 = SET SK_ST2 = SET SK_ST3 = RES KEYACK = MOV 0 KEYATIM = RES SNDKEYST
SK_ST0 = CNCWR(KEYCODE,KEY,SK_ST1) = RES SK_ST0
SK_ST2 AND NOT SK_ST1 = CNCRD(KEY,KEYACPT,SK_ST2)
SK_ST3 AND NOT SK_ST2 AND CPS KEYACPT EQ KEYCODE
= SET KEYACK
= RES SK_ST3
= RES SK_ST2
= RES SK_ST1
= RES SK_ST0
SK_ST3 AND NOT SK_ST2 AND CPS KEYACPT NE KEYCODE AND CPS KEYATIM LE 10
= RES KEYACK
= RES SK_ST0
= RES SK_ST1
= SET SK_ST2
= ADS KEYATIM 1 KEYATIM
SK_ST3 AND NOT SK_ST2 AND CPS KEYACPT NE KEYCODE AND CPS KEYATIM GT 10
= RES KEYACK
= SET SK_ST0
= SET SK_ST1
= SET SK_ST2
= MOV 0 KEYATIM
;
;
; SEND STR 1: MAIN MENU + EXEC + F3 + F6 TO GET TO DISP USER SCREEN 
;
SNDSTR1 = SET SS1_ST0 = SET SS1_ST1 = SET SS1_ST2 = SET SS1_ST3 = SET SS1_ST4 = SET SS1_ST5 = SET SS1_ST6 = SET SS1_ST7 = SET SS1_ST8 = SET SS1_CYC = RES SNDSTR1
NOT SS1_CYC = JMP L1010
SS1_CYC AND SS1_ST0 = MOV KSRC_P KEY_SRC = RES KEYACK = CNCWR(KEY_SRC,KEYSRC,SS1_ST0) ; KEYS COME FROM PLC
SS1_CYC AND SS1_ST1 AND NOT SS1_ST0 = RES KEYACK = MOV K_MAINM KEYCODE = SET SNDKEYST = RES SS1_ST1
SS1_CYC AND SS1_ST2 AND NOT SS1_ST1 AND CPS R144 EQ 0 = RES SS1_ST2
SS1_CYC AND SS1_ST3 AND NOT SS1_ST2 AND KEYACK = RES KEYACK = MOV K_EXE KEYCODE = SET SNDKEYST = RES SS1_ST3
SS1_CYC AND SS1_ST4 AND NOT SS1_ST3 AND CPS R144 GE 10 = RES SS1_ST4
SS1_CYC AND SS1_ST5 AND NOT SS1_ST4 AND KEYACK = RES KEYACK = MOV K_F3 KEYCODE = SET SNDKEYST = RES SS1_ST5
SS1_CYC AND SS1_ST6 AND NOT SS1_ST5 AND KEYACK = RES KEYACK = MOV K_F6 KEYCODE = SET SNDKEYST = RES SS1_ST6
SS1_CYC AND SS1_ST7 AND NOT SS1_ST6 AND KEYACK = MOV KSRC_C KEY_SRC = RES KEYACK = CNCWR(KEY_SRC,KEYSRC,SS1_ST7)
SS1_CYC AND SS1_ST8 AND NOT SS1_ST7 = RES SS1_CYC = RES SNDSTR1 = RES SS1_ST8
L1010 ; NO STRING #1
;
;
; SEND STR 2: MAIN MENU + EXEC + F3 + F6 TO GET TO DISP USER SCREEN 
;
SNDSTR2 = SET SS2_ST0 = SET SS2_ST1 = SET SS2_ST2 = SET SS2_ST3 = SET SS2_ST4 = SET SS2_ST5 = SET SS2_ST6 = SET SS2_ST7 = SET SS2_ST8 = SET SS2_CYC = RES SNDSTR2
NOT SS2_CYC = JMP L1020
SS2_CYC AND SS2_ST0 = MOV KSRC_P KEY_SRC = RES KEYACK = CNCWR(KEY_SRC,KEYSRC,SS2_ST0) ; KEYS COME FROM PLC
SS2_CYC AND SS2_ST1 AND NOT SS2_ST0 = RES KEYACK = MOV K_F6 KEYCODE = SET SNDKEYST = RES SS2_ST1
SS2_CYC AND SS2_ST2 AND NOT SS2_ST1 = RES SS2_ST2
SS2_CYC AND SS2_ST3 AND NOT SS2_ST2 AND KEYACK = RES KEYACK = MOV K_F4 KEYCODE = SET SNDKEYST = RES SS2_ST3
SS2_CYC AND SS2_ST4 AND NOT SS2_ST3 = RES SS2_ST4
SS2_CYC AND SS2_ST5 AND NOT SS2_ST4 AND KEYACK = RES KEYACK = MOV K_START KEYCODE = SET SNDKEYST = RES SS2_ST5
SS2_CYC AND SS2_ST6 AND NOT SS2_ST5 = RES SS2_ST6
SS2_CYC AND SS2_ST7 AND NOT SS2_ST6 AND KEYACK = MOV KSRC_C KEY_SRC = RES KEYACK = CNCWR(KEY_SRC,KEYSRC,SS2_ST7)
SS2_CYC AND SS2_ST8 AND NOT SS2_ST7 = RES SS2_CYC = RES SNDSTR2 = RES SS2_ST8
L1020 ; NO STRING #2
;
;
;
;  TURN ON PLC MODE SEND 1 KEYSTROKE AND GO BACK TO CNC
;  KECODE IS CHAR TO SEND
SND1CH = SET S1C_ST0 = SET S1C_ST1 = SET S1C_ST2 = SET S1C_ST3 = SET S1C_ST4 = SET S1C_ST5 = SET S1C_ST6 = RES S1CHACK = SET S1C_CYC = RES SND1CH
NOT S1C_CYC = JMP L1030
S1C_CYC AND S1C_ST0 = MOV KSRC_P KEY_SRC = RES KEYACK = CNCWR(KEY_SRC,KEYSRC,S1C_ST1) = RES S1C_ST0
S1C_CYC AND S1C_ST2 AND NOT S1C_ST1 = RES KEYACK = SET SNDKEYST = RES S1C_ST2
S1C_CYC AND S1C_ST3 AND NOT S1C_ST2 AND KEYACK = RES S1C_ST3
S1C_CYC AND S1C_ST4 AND NOT S1C_ST3 = MOV KSRC_C KEY_SRC = RES KEYACK = CNCWR(KEY_SRC,KEYSRC,S1C_ST5) = RES S1C_ST4
S1C_CYC AND S1C_ST6 AND NOT S1C_ST5 = SET S1CHACK = RES S1C_CYC = RES S1C_ST4 = RES S1C_ST5 = RES S1C_ST6
L1030 ; NO SEND 1 CHAR CYCLE
;
;
NOT IXOT = LIMIT+X = LIMIT-X 
NOT IYOT = LIMIT+Y = LIMIT-Y
NOT IZOT = LIMIT+Z = LIMIT-Z 
()=CNCRD(OPMODE,R145,M1111)
CPS R145 GE 20 AND CPS R145 LE 25 = LIMYOFF
;RPB EDIT  DFD B18R562 = M1200
()=CNCRD(OPMODA,R7,M1111)
() = MOV 64514 R3;F3 KEY
= MOV 64517 R4;F6 KEY
= MOV 1 R5;PLC KEYBOARD
= MOV 0 R6;CNC KEYBOARD
=CNCRD(KEY,R8,M1111);LAST KEY PRESSED
B0R7 AND AUTOMAT AND DFU M1200 = CNCWR(R5,KEYSRC,M1111) = SET M1201
= CNCWR(R3,KEY,M1115)
M1201 AND CPS R8 EQ R3 AND NOT M1115= RES M1201
= CNCWR(R4,KEY,M1111)
=CNCWR(R6,KEYSRC,M1111)
RESETOUT OR NOT I1 OR DM30=RES M1200=RES M1201
=CNCWR(R6,KEYSRC,M1111)
END
